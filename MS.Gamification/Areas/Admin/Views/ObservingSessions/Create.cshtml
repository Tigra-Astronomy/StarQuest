@model MS.Gamification.Areas.Admin.ViewModels.ObservingSessions.CreateObservingSessionViewModel

@{
    ViewBag.Title = "Create New Observing Session";
}

<h2>Schedule an Observing Session</h2>

@using (Html.BeginForm())
    {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Session</h4>
        <hr/>
        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Title, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Venue, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Venue, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Venue, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartsAt, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartsAt, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.StartsAt, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Description, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="panel panel-default col-md-offset-2" id="notifactionOptionsPanel">
            <div class="panel-heading">Send Notifications to Members</div>
            <div class="panel-body">
                <div class="form-group">
                    <span >
                        @Html.CheckBoxFor(model => model.SendAnnouncement, new {@class = "checkbox-inline"})
                        Immediately
                    </span>
                    <span >
                        @Html.CheckBoxFor(model => model.RemindOneWeekBefore, new {@class = "checkbox-inline"})
                        a week before
                    </span>
                    <span >
                        @Html.CheckBoxFor(model => model.RemindOneDayBefore, new {@class = "checkbox-inline"})
                        the day before
                    </span>
                </div>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
    }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/preconditionEditor");
}
@section styles
{
    @Styles.Render("~/Content/codeMirror.css");
}